maze.java & maze.dat
	- Pathfinding
	- Search
		- Blind Search
		- Depth First Search
			- Tries to go down one path as far as possible before
			  return
		- Linear Search
		- Search w/ Backtracking
		- State Space Search
			- State: state of the program's world
			- The code transitions the program to different states
			  to find the path from starting to end state
			- Nodes: the states & Edges: The transitions
		
	- Cons:
		- Branching Factor: Branching program causing a exponential program
		

- Heuristic Search
	- Follows a guideline instead of blind search
	

- State Space Search
	- Maze Solver
	- Path Finding
	- 15 Puzzle
	- Rubex Cube

- State Machine uses State Space Methods

- Chess
	- Initial State: Board w/ all pieces set up
	- End States: Checkmates & Draws
	- Difficulties: Multiple end states, 
			objects within states can be taken out,
	        	branching factor is vast, 
			2nd player
	- Solution: use Heuristic strategy to find next best move (standard openings, end game, and position maximization),
		    mini-max searching, 
	            multi-depth searches,
		    alpha beta prune,

Mini-Max Search: computing best moves and worst moves for the ai and for player,
for first, second and many moves down the line,
and compute the difference to find the best move for the ai.
                    
alpha beta prune: takes the worst moves and toss them.

- Go

- RPG
	- Multi-States: Wander State, Chasing State, Combat State

- Implicit Data Structure
	- Node creation and destruction through recursive method calls

- Explicit Data Structure
	- Calling methods and ending methods

Breath-first Search
searching a block radius at a time
a loop (not recursion)

frontier - a queue (first in first out)

while (!queue.empty()) {
current = remove front node from frontier
if (current is exit) {
break
}
mark current as visited
for each unprocessed neighbor N of current:
mark N as processed
add N to frontier
}

if the node was put in the front of queue: depth-first search
	- frontier becomes a stack (First in Last out)

Current : 1 node
Frontier : queue
